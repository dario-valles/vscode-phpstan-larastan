{"version":3,"file":"extension.js","mappings":"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","sources":[".././node_modules/temp-dir/index.js",".././node_modules/throttle-debounce/cjs/index.js",".././src/controller.ts","../external \"child_process\"","../external \"fs\"","../external \"os\"","../external \"path\"","../external \"process\"","../external \"vscode\"","../webpack/bootstrap",".././src/extension.ts"],"sourcesContent":["'use strict';\nconst fs = require('fs');\nconst os = require('os');\n\nconst tempDirectorySymbol = Symbol.for('__RESOLVED_TEMP_DIRECTORY__');\n\nif (!global[tempDirectorySymbol]) {\n\tObject.defineProperty(global, tempDirectorySymbol, {\n\t\tvalue: fs.realpathSync(os.tmpdir())\n\t});\n}\n\nmodule.exports = global[tempDirectorySymbol];\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {number}    delay -          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {boolean}   [noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset).\n * @param  {Function}  callback -       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {boolean}   [debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function}  A new, throttled, function.\n */\nfunction throttle (delay, noTrailing, callback, debounceMode) {\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel() {\n    clearExistingTimeout();\n    cancelled = true;\n  } // `noTrailing` defaults to falsy.\n\n\n  if (typeof noTrailing !== 'boolean') {\n    debounceMode = callback;\n    callback = noTrailing;\n    noTrailing = undefined;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, arguments_);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      /*\n       * In throttle mode, if `delay` time has been exceeded, execute\n       * `callback`.\n       */\n      exec();\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {number}   delay -         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {boolean}  [atBegin] -     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback -      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @returns {Function} A new, debounced function.\n */\n\nfunction debounce (delay, atBegin, callback) {\n  return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n}\n\nexports.debounce = debounce;\nexports.throttle = throttle;\n//# sourceMappingURL=index.js.map\n","import {\n  commands,\n  languages,\n  workspace,\n  window,\n  Disposable,\n  Diagnostic,\n  DiagnosticCollection,\n  Range,\n  StatusBarAlignment,\n  StatusBarItem,\n  TextDocument,\n  Uri,\n} from \"vscode\";\nimport { debounce } from \"throttle-debounce\";\nimport * as tempDirectory from \"temp-dir\";\nimport * as child_process from \"child_process\";\nimport * as path from \"path\";\nimport { writeFileSync, existsSync, statSync, constants, accessSync } from \"fs\";\nimport { platform } from \"process\";\n\ninterface PhpStanOutput {\n  totals: {\n    errors: number;\n    files: number;\n  };\n  files: {\n    [propName: string]: {\n      error: number;\n      messages: {\n        message: string;\n        line: number | null;\n        ignorable: boolean;\n      }[];\n    };\n  };\n  errors: any;\n}\n\ninterface PhpStanArgs {\n  autoloadFile?: string;\n  configuration?: string;\n  level?: number | string;\n  memoryLimit?: string;\n  noProgress?: boolean;\n  path?: string;\n  debounce?: number;\n  liveErrorTracking?: boolean;\n  tmpPath?: string;\n}\n\nexport class PhpStanController {\n  private _analyzing: boolean = false;\n  private _phpstan: string = \"phpstan\";\n  private _diagnosticCollection: DiagnosticCollection;\n  private _disposable: Disposable;\n  private _statusBarItem: StatusBarItem;\n  private _commandForFile: Disposable;\n  private _commandForFolder: Disposable;\n  private _config: PhpStanArgs = {};\n  public version = 0;\n\n  public constructor() {\n    const subscriptions: Disposable[] = [];\n\n    workspace.onDidChangeConfiguration(this._initConfig, this, subscriptions);\n    workspace.onDidSaveTextDocument(\n      this._shouldAnalyseFile,\n      this,\n      subscriptions\n    );\n    workspace.onDidOpenTextDocument(\n      this._shouldAnalyseFile,\n      this,\n      subscriptions\n    );\n\n    window.onDidChangeTextEditorSelection(\n      (e) => {\n        const version = e.textEditor.document.version;\n        if (this.version === version) {\n          return\n        }\n        this.version = version;\n        if (\n          !this._config.liveErrorTracking ||\n          e.textEditor.document.languageId != \"php\"\n        ) {\n          return;\n        }\n        const editor = window.activeTextEditor;\n        if (editor) {\n          const documentText = editor.document.getText();\n          const originalPath = editor.document.uri.path;\n          const originalName = editor.document.fileName.split(\"/\").slice(-1);\n          window.showInformationMessage(\"\" + this._config.tmpPath);\n          const document = {\n            fileName: `${\n              this._config.tmpPath || tempDirectory\n            }/${originalName}`,\n            isClosed: false,\n            languageId: \"php\",\n          };\n          writeFileSync(document.fileName, documentText);\n          this.shouldAnalyseFile()(document, originalPath);\n        } else {\n          this.shouldAnalyseFile();\n        }\n      },\n      this,\n      subscriptions\n    );\n    this._disposable = Disposable.from(...subscriptions);\n    this._statusBarItem = window.createStatusBarItem(StatusBarAlignment.Right);\n    this._commandForFile = commands.registerCommand(\n      \"extension.phpstanLintThisFile\",\n      this._shouldAnalyseFile.bind(this)\n    );\n    this._commandForFolder = commands.registerCommand(\n      \"extension.phpstanLintThisFolder\",\n      (resource: any) => {\n        this._shouldAnalyseFolder(resource);\n      }\n    );\n\n    this._diagnosticCollection =\n      languages.createDiagnosticCollection(\"phpstan_error\");\n\n    this._initConfig();\n    this._initPhpstan();\n  }\n\n  public shouldAnalyseFile = () =>\n    debounce(\n      this.getConfigDebounce(),\n      false,\n      this._shouldAnalyseFile.bind(this)\n    );\n\n  private getConfigDebounce(): number {\n    return this._config.debounce || 2000;\n  }\n\n  public dispose() {\n    this._diagnosticCollection.dispose();\n    this._commandForFolder.dispose();\n    this._commandForFile.dispose();\n    this._statusBarItem.dispose();\n    this._disposable.dispose();\n  }\n\n  private _initPhpstan() {\n    const vendorPath = \"vendor/bin/phpstan\";\n    const phpstanPath = existsSync(\"vendor/bin/phpstan\")\n      ? vendorPath\n      : \"phpstan\";\n    this._phpstan = platform === \"win32\" ? \"phpstan.bat\" : phpstanPath;\n  }\n\n  private _initConfig() {\n    const workspace_config = workspace.getConfiguration();\n\n    this._config.tmpPath = workspace_config.get(\n      \"phpstan.tmpPath\",\n      tempDirectory\n    );\n    this._config.debounce = workspace_config.get(\"phpstan.debounce\", 2000);\n    this._config.liveErrorTracking = workspace_config.get(\n      \"phpstan.liveErrorTracking\",\n      true\n    );\n    this._config.configuration = workspace_config.get(\n      \"phpstan.configuration\",\n      undefined\n    );\n    this._config.level = workspace_config.get(\"phpstan.level\", 5);\n    this._config.memoryLimit = workspace_config.get(\n      \"phpstan.memoryLimit\",\n      \"1G\"\n    );\n    this._config.noProgress = workspace_config.get(\"phpstan.noProgress\", true);\n\n    const autoloadPath = \"vendor/autoload.php\";\n    this._config.autoloadFile = workspace_config.get(\n      \"phpstan.autoloadFile\",\n      existsSync(autoloadPath) ? autoloadPath : undefined\n    );\n  }\n\n  private _shouldAnalyseFile(document?: any, originalPath?: string) {\n    if (!document?.fileName || !originalPath) {\n      if (!this._editor()) return;\n      document = this._editor()?.document;\n    }\n    document.languageId === \"php\"\n      ? this.analyseFile(document.fileName, originalPath)\n      : this._statusBarItem.hide();\n  }\n\n  private _editor = () => window.activeTextEditor;\n\n  private _shouldAnalyseFolder(resource: any) {\n    if (resource?.fsPath) {\n      return this.analyseFolder(resource.fsPath);\n    }\n\n    const editor = window.activeTextEditor;\n\n    return editor\n      ? this.analyseFolder(path.dirname(editor.document.fileName))\n      : this._statusBarItem.hide();\n  }\n\n  public analyseFile(file: string, originalPath?: string) {\n    this.analyse(file, originalPath);\n  }\n\n  public analyseFolder(dir: string) {\n    this.analyse(dir);\n  }\n\n  protected setDiagnostics(data: PhpStanOutput, originalPath: string) {\n    if (data.files) {\n      const editor = window.activeTextEditor;\n      const document: TextDocument | null = editor ? editor.document : null;\n      for (const file in data.files) {\n        const output_files = data.files[file];\n        const output_messages = output_files.messages;\n        const diagnostics: Diagnostic[] = [];\n        const uri = Uri.file(originalPath || file);\n        const uri_string = uri.toString();\n\n        this._diagnosticCollection.delete(uri);\n\n        output_messages.forEach((el) => {\n          const line = (el.line || 1) - 1;\n          let range: Range;\n          const message = el.message;\n          if (document?.uri.toString() === uri_string) {\n            range = new Range(\n              line,\n              0,\n              line,\n              document.lineAt(line).range.end.character + 1\n            );\n            const text = document.getText(range);\n            const result = /^(\\s*).*(\\s*)$/.exec(text);\n            if (result) {\n              range = new Range(\n                line,\n                result[1].length,\n                line,\n                text.length - result[2].length\n              );\n            } else {\n              range = new Range(line, 0, line, 1);\n            }\n          } else {\n            range = new Range(line, 0, line, 1);\n          }\n          diagnostics.push(new Diagnostic(range, \"[phpstan] \" + message));\n        });\n        this._diagnosticCollection.set(uri, diagnostics);\n      }\n    }\n  }\n\n  protected analyse(thePath: string, originalPath?: string) {\n    if (this._analyzing) {\n      return null;\n    }\n    this._analyzing = true;\n    this._statusBarItem.text = \"[phpstan] analyzing...\";\n    this._statusBarItem.show();\n    const args: PhpStanArgs = { ...this._config };\n    const stats = statSync(thePath);\n    const baseDir: string = stats.isFile()\n        ? path.dirname(thePath)\n        : stats.isDirectory()\n        ? thePath\n        : \"\";\n    const projectPath = workspace?.workspaceFolders?.[0].uri.fsPath || \"\";\n    let cwd: string = \"\";\n\n    args.path = thePath;\n\n    if (!args.configuration) {\n      args.configuration = this.upFindConfiguration(projectPath);\n    }\n\n    if (!args.autoloadFile) {\n      args.autoloadFile = this.upFindAutoLoadFile(projectPath);\n    }\n\n    if (!cwd && stats.isDirectory()) {\n      cwd = this.downFindRealWorkPath(baseDir);\n    }\n\n    if (args.configuration && args.autoloadFile) {\n      cwd = this.getCurrentWorkPath(originalPath || baseDir);\n    }\n\n    let result = \"\";\n    let errMsg = \"\";\n    let phpstan = child_process.spawn(\n      this.makeCommandPath(cwd),\n      this.makeCommandArgs(args),\n      this.setCommandOptions(cwd)\n    );\n\n    phpstan.stderr.on(\"data\", (data) => {\n      errMsg += data.toString();\n    });\n\n    phpstan.stdout.on(\"data\", (data) => {\n      result += data.toString();\n    });\n\n    phpstan.on(\"exit\", (code) => {\n      this._analyzing = false;\n      this._statusBarItem.show();\n\n      if (stats.isFile()) {\n        this._diagnosticCollection.delete(Uri.file(originalPath || thePath));\n      }\n\n      if (code === 0) {\n        this._statusBarItem.text = \"[phpstan] passed\";\n      } else if (errMsg) {\n        // phpstan failed\n        this._statusBarItem.text = \"[phpstan] failed\";\n        window.showErrorMessage(\n          \"It seems something wrong with PHPStan: \" + errMsg\n        );\n      } else if (result) {\n        // phpstan error\n        const index = result.indexOf('{\"totals\":');\n        if (index > -1) {\n          result = result.substring(index);\n        }\n        const data = JSON.parse(result);\n        this.setDiagnostics(data, originalPath || thePath);\n        this._statusBarItem.text = \"[phpstan] error \" + data.totals.file_errors;\n      } else {\n        this._statusBarItem.text = \"[phpstan] unknown\";\n      }\n    });\n  }\n\n  protected makeCommandPath(cwd: string) {\n    let binDir = \"vendor/bin\";\n    const baseName = platform === \"win32\" ? \"phpstan.bat\" : \"phpstan\";\n    try {\n      binDir = child_process\n        .execSync(\"composer config bin-dir\", { cwd })\n        .toString()\n        .trim();\n    } catch (err) {}\n    const binary = path.resolve(cwd, binDir, baseName);\n    try {\n      accessSync(binary, constants.X_OK);\n      return binary;\n    } catch (err) {\n      return this._phpstan;\n    }\n  }\n\n  protected makeCommandArgs(args: PhpStanArgs) {\n    const result: string[] = [\"analyse\", \"--error-format=json\"];\n    const argsLevel = this.getArgsLevel(args?.level);\n\n    argsLevel && result.push(argsLevel);\n    args.noProgress && result.push(\"--no-progress\");\n    args.memoryLimit && result.push(\"--memory-limit=\" + args.memoryLimit);\n    args.configuration && result.push(\"--configuration=\" + args.configuration);\n    args.autoloadFile && result.push(\"--autoload-file=\" + args.autoloadFile);\n    args.path && result.push(args.path);\n\n    return result;\n  }\n\n  protected getArgsLevel(level: string | number | undefined): string | null {\n    if (level === \"config\") return null;\n    return level ? \"--level=\" + level : \"--level=max\";\n  }\n\n  protected setCommandOptions(cwd: string) {\n    return { cwd };\n    // let result: { cwd?: string } = {};\n    // if (cwd) {\n    //   result.cwd = cwd;\n    // }\n    // return result;\n  }\n\n  protected getCurrentWorkPath(baseDir: string) {\n    let workPath = \"\";\n    let similarity = 0;\n    const folders = workspace.workspaceFolders;\n\n    if (folders) {\n      folders.forEach((el, i) => {\n        if (\n          el.uri.fsPath.length > similarity &&\n          baseDir.indexOf(el.uri.fsPath) === 0\n        ) {\n          workPath = el.uri.fsPath;\n          similarity = workPath.length;\n        }\n      });\n    }\n    return workPath;\n  }\n\n  protected downFindRealWorkPath(baseDir: string) {\n    return this.tryFindRealWorkPath(\n      baseDir,\n      [\"src\", \"source\", \"sources\"],\n      [\"phpstan.neon\", \"phpstan.neon.dist\", \"vendor/autoload.php\"]\n    );\n  }\n\n  protected tryFindRealWorkPath(\n    baseDir: string,\n    dirs: string[],\n    targets: string[]\n  ) {\n    let workPath;\n    let tempPath;\n    for (let i in dirs) {\n      workPath = path.join(baseDir, dirs[i]);\n      if (existsSync(workPath)) {\n        for (let j in targets) {\n          tempPath = path.join(workPath, targets[j]);\n          if (existsSync(tempPath)) {\n            return workPath;\n          }\n        }\n      }\n    }\n    return \"\";\n  }\n\n  protected upFindAutoLoadFile(baseDir: string) {\n    const autoLoadFilePath = path.join(baseDir, \"vendor/autoload.php\");\n\n    return existsSync(autoLoadFilePath) ? autoLoadFilePath : \"\";\n  }\n\n  protected upFindConfiguration(baseDir: string) {\n    const config1 = path.join(baseDir, \"phpstan.neon\");\n    const config2 = path.join(baseDir, \"phpstan.neon.dist\");\n\n    if (existsSync(config1)) {\n      return config1;\n    }\n    if (existsSync(config2)) {\n      return config2;\n    }\n\n    return \"\";\n  }\n}\n","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"process\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport { ExtensionContext } from \"vscode\";\nimport { PhpStanController } from \"./controller\";\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: ExtensionContext) {\n  context.subscriptions.push(new PhpStanController());\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["fs","os","tempDirectorySymbol","Symbol","for","global","Object","defineProperty","value","realpathSync","tmpdir","module","exports","throttle","delay","noTrailing","callback","debounceMode","timeoutID","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","_len","arguments","length","arguments_","Array","_key","self","this","elapsed","Date","now","exec","apply","clear","undefined","setTimeout","cancel","debounce","atBegin","_analyzing","_phpstan","_config","version","shouldAnalyseFile","getConfigDebounce","_shouldAnalyseFile","bind","_editor","window","activeTextEditor","subscriptions","workspace","onDidChangeConfiguration","_initConfig","onDidSaveTextDocument","onDidOpenTextDocument","onDidChangeTextEditorSelection","e","textEditor","document","liveErrorTracking","languageId","editor","documentText","getText","originalPath","uri","path","originalName","fileName","split","slice","showInformationMessage","tmpPath","tempDirectory","isClosed","writeFileSync","_disposable","Disposable","from","_statusBarItem","createStatusBarItem","StatusBarAlignment","Right","_commandForFile","commands","registerCommand","_commandForFolder","resource","_shouldAnalyseFolder","_diagnosticCollection","languages","createDiagnosticCollection","_initPhpstan","dispose","phpstanPath","existsSync","platform","workspace_config","getConfiguration","get","configuration","level","memoryLimit","noProgress","autoloadPath","autoloadFile","analyseFile","hide","fsPath","analyseFolder","dirname","file","analyse","dir","setDiagnostics","data","files","output_messages","messages","diagnostics","Uri","uri_string","toString","delete","forEach","el","line","range","message","Range","lineAt","end","character","text","result","push","Diagnostic","set","thePath","show","args","stats","statSync","baseDir","isFile","isDirectory","projectPath","workspaceFolders","cwd","upFindConfiguration","upFindAutoLoadFile","downFindRealWorkPath","getCurrentWorkPath","errMsg","phpstan","child_process","spawn","makeCommandPath","makeCommandArgs","setCommandOptions","stderr","on","stdout","code","showErrorMessage","index","indexOf","substring","JSON","parse","totals","file_errors","binDir","baseName","execSync","trim","err","binary","resolve","accessSync","constants","X_OK","argsLevel","getArgsLevel","workPath","similarity","folders","i","tryFindRealWorkPath","dirs","targets","tempPath","join","j","autoLoadFilePath","config1","config2","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","context","PhpStanController"],"sourceRoot":""}